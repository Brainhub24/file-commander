name: CI

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Build & test on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Checkout subrepos
      run: ./update_repository.sh

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      
    - name: Windows - setup MSBuild
      if: startsWith(matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Windows
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        ${env:Qt5_DIR}/bin/qmake.exe -v
        dir "C:\Program Files (x86)\Windows Kits\10\include\"
        set QTDIR64=${env:Qt5_DIR}
        # Building the main project
        cd installer\windows\
        create_installer.bat
        # Building tests
        cd ..\..
        cd file-commander-core\core-tests\
        call "%programfiles(x86)%\Microsoft Visual Studio\%VS_VERSION%\Community\VC\Auxiliary\Build\vcvarsall.bat" amd64 %WIN_SDK% && "%QTDIR64%\bin\qmake.exe" -tp vc -r
        msbuild /t:Build /p:Configuration=Release;PlatformToolset=v142
        cd ..\..
        # Deploying extra files
        xcopy /R /Y .\installer\windows\binaries\64\msvcr\* .\bin\release\x64\
        xcopy /R /Y .\installer\windows\binaries\64\Qt\* .\bin\release\x64\

    - name: Mac
      if: startsWith(matrix.os, 'macos')
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        clang --version
        ./installer/mac/create_dmg.sh ${env:Qt5_DIR}
      
    - name: Linux
      if: startsWith(matrix.os, 'ubuntu')
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        export QT_DEBUG_PLUGINS=1
        sudo apt-get update -y; sudo apt-get install -qq libglu1-mesa-dev libx11-xcb-dev '^libxcb*'
        g++ --version
        export PATH=${env:Qt5_DIR}/bin/:$PATH
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage"
        chmod a+x linuxdeployqt-7-x86_64.AppImage
        unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH
        ${env:Qt5_DIR}/bin/qmake -r CONFIG+=release
        make -j
        # Linux: building AppImage
        cp ./qt-app/resources/icon.png ./bin/release/x64/
        cp ./installer/linux/file_commander.desktop ./bin/release/x64/
        ./linuxdeployqt-7-x86_64.AppImage ./bin/release/x64/FileCommander -appimage -unsupported-allow-new-glibc -bundle-non-qt-libs -qmake=$QMAKE -executable=./bin/release/x64/libplugin_filecomparison.so.1.0.0 -executable=./bin/release/x64/libplugin_imageviewer.so.1.0.0 -executable=./bin/release/x64/libplugin_textviewer.so.1.0.0
        ls -Ac
        mv ./File_Commander*.AppImage ./FileCommander.AppImage
      
    - name: Test run
      if: startsWith(matrix.os, 'macos')
      run: ./bin/release/x64/FileCommander.app/Contents/MacOS/FileCommander --test-launch
      
    - name: Test run
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        xvfb-run --auto-servernum ./bin/release/x64/FileCommander --test-launch
        
    - name: Test run
      if: startsWith(matrix.os, 'widows')
      run: |
        .\bin\release\x64\FileCommander.exe --test-launch  
      
    - name: Tests - Mac
      if: startsWith(matrix.os, 'macos')
      run: |
        cd file-commander-core/core-tests
        ${env:Qt5_DIR}/bin/qmake -r CONFIG+=release
        make -j
        cd ../../
        for f in $(find bin/release/x64/ -name *.app); do ${env:Qt5_DIR}/bin/macdeployqt $f; done
        echo Running tests...
        set -e; ./bin/release/x64/fso_test.app/Contents/MacOS/fso_test
        set -e; ./bin/release/x64/fso_test_high_level.app/Contents/MacOS/fso_test_high_level
        set -e; for i in `seq 1 20`; do ./bin/release/x64/operationperformer_test.app/Contents/MacOS/operationperformer_test --std-seed $(date +%s); sleep 1; done
        set -e; ./bin/release/x64/filecomparator_test.app/Contents/MacOS/filecomparator_test --std-seed $(date +%s)
        
    - name: Tests - Linux
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd file-commander-core/core-tests
        ${env:Qt5_DIR}/bin/qmake -r CONFIG+=release
        make -j
        cd ../../
        for f in $(find bin/release/x64/ -name *.app); do ${env:Qt5_DIR}/bin/macdeployqt $f; done
        ./linuxdeployqt-7-x86_64.AppImage ./bin/release/x64/fso_test -unsupported-allow-new-glibc -bundle-non-qt-libs
        ./linuxdeployqt-7-x86_64.AppImage ./bin/release/x64/fso_test_high_level -unsupported-allow-new-glibc -bundle-non-qt-libs
        ./linuxdeployqt-7-x86_64.AppImage ./bin/release/x64/operationperformer_test -unsupported-allow-new-glibc -bundle-non-qt-libs
        ./linuxdeployqt-7-x86_64.AppImage ./bin/release/x64/filecomparator_test -unsupported-allow-new-glibc -bundle-non-qt-libs
        echo Running tests...
        set -e; ./bin/release/x64/fso_test
        set -e; ./bin/release/x64/fso_test_high_level
        set -e; for i in `seq 1 20`; do ./bin/release/x64/operationperformer_test --std-seed $(date +%s); sleep 1; done
        set -e; ./bin/release/x64/filecomparator_test --std-seed $(date +%s)

    - name: Tests - windows-latest
      if: startsWith(matrix.os, 'windows')
      run: |
        .\bin\release\x64\fso_test.exe
        .\bin\release\x64\fso_test_high_level.exe

        For ($i=1; $i -le 20; $i++) {
          $randomSeed = ((get-date -Uformat %s).remove(10, 1));
          $randomSeed = $randomSeed.substring($randomSeed.Length - 8);
          & .\bin\release\$($env:BUILD_ARCH)\operationperformer_test.exe --std-seed $randomSeed;
        }

        $randomSeed = ((get-date -Uformat %s).remove(10, 1));
        $randomSeed = $randomSeed.substring($randomSeed.Length - 8);
        & .\bin\release\$($env:BUILD_ARCH)\filecomparator_test.exe --std-seed $randomSeed;

    - name: Archive DMG
      if: startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v2
      with:
          name: FileCommander.dmg
          path: FileCommander.dmg
          
    - name: Archive AppImage
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v2
      with:
          name: FileCommander.AppImage
          path: FileCommander.AppImage

    - name: Archive Installer
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
          name: FileCommander.exe
          path: FileCommander.exe
